import numpy as np

def gauss_seidel(A, b, x0=None, max_iterations=2):
    """
    Performs Gauss-Seidel iterations to solve Ax = b.

    Parameters:
    A (numpy.ndarray): Coefficient matrix.
    b (numpy.ndarray): Right-hand side vector.
    x0 (numpy.ndarray): Initial guess for the solution.
    max_iterations (int): Maximum number of iterations.

    Returns:
    numpy.ndarray: Approximate solution after max_iterations iterations.
    """
    n = len(b)
    if x0 is None:
        x0 = np.zeros(n)
    x = np.copy(x0)

    for iteration in range(max_iterations):
        for i in range(n):
            sum1 = np.dot(A[i, :i], x[:i])
            sum2 = np.dot(A[i, i+1:], x[i+1:])
            x[i] = (b[i] - sum1 - sum2) / A[i, i]
        print(f"Iteration {iteration + 1}: x = {x}")

    return x

# Define the matrix A and the vector b
A = np.array([[4, 1, -1, 1],
              [1, 4, -1, -1],
              [-1, -1, 5, 1],
              [1, -1, 1, 3]], dtype=float)

b = np.array([-2, -1, 0, 1], dtype=float)

# Initial guess for the solution
x0 = np.zeros_like(b)

# Perform Gauss-Seidel iterations and print the results
gauss_seidel(A, b, x0, max_iterations=2)
